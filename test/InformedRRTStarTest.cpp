#include <gtest/gtest.h>
#include <cmath>

// Class header file
#include "InformedRRTStar.hpp"

InformedRRTStar dummyPlan;  ///< Initialize Test planner

std::vector<std::pair<double, double>>
    dummyBoundary;  ///< variable to hold boundary vertices
std::vector<std::vector<double>>
    dummyObstacles;  ///< variable to hold obstacles and their vertices

/**
 *@brief Test case to check the RRT Star planner. The test case checks whether
 the path found is correct based on the following three conditions:

         1. The last waypoint of the path should be the goal node. (i.e the goal
            node is a leaf node in the RRTree)
         2. Tracing the parent of the goal node in the tree, the path should end
            at the start node i.e root node
         3. The distance between each waypoint should be within drivable range
            of the planner

 *@param none
 *@return none
 */
TEST(InformedRRTStarValidPathTest,
     testValidityOfPathGivenByTheInformedRRTStarPlanner) {
  // Define the environment
  dummyBoundary.push_back(std::make_pair(0.0, 0.0));
  dummyBoundary.push_back(std::make_pair(100.0, 0.0));
  dummyBoundary.push_back(std::make_pair(100.0, 100.0));
  dummyBoundary.push_back(std::make_pair(0.0, 100.0));

  dummyObstacles.push_back({0.0, 80.0, 10.0, 80.0, 10.0, 90.0, 0.0, 90.0});
  dummyObstacles.push_back({0.0, 90.0, 25.0, 90.0, 25.0, 100.0, 0.0, 100.0});
  dummyObstacles.push_back({20.0, 0.0, 80.0, 0.0, 80.0, 15.0, 20.0, 15.0});
  dummyObstacles.push_back({93.0, 40.0, 100.0, 40.0, 100.0, 90.0, 93.0, 90.0});

  // Set the map for the planner
  dummyPlan.setMap(dummyBoundary, dummyObstacles);

  // Set start and goal point
  std::vector<double> start = {1.0, 1.0};
  std::vector<double> goal = {50.0, 55.0};

  dummyPlan.setStartAndGoal(start, goal);

  // Execute the planner
  dummyPlan.runPlanner();

  // Get the planner path
  auto waypoints = dummyPlan.getPlannerPath();

  // Get the tree generated by the planner
  auto tree = dummyPlan.getRRTree();

  // 1. The last waypoint of the path should be the goal node. (i.e the goalnode
  // is a leaf node in the RRTree)
  std::vector<double> planGoal = {waypoints.back().first,
                                  waypoints.back().second};
  ASSERT_EQ(goal, planGoal);

  // 2. Tracing the parent of the goal node in the tree, the path should end at
  // the start node i.e root node
  auto RRTree = dummyPlan.getRRTree();
  auto goalPtr = dummyPlan.getGoalNodePtr();
  auto parent = goalPtr->getParent();
  std::vector<double> rootNode;
  while (parent != nullptr) {
    rootNode = parent->getState();
    parent = parent->getParent();
  }
  ASSERT_EQ(start, rootNode);

  // 3. The distance between each waypoint should be within drivable range of
  // the planner
  double driveParam = dummyPlan.getPlannerParams().second;
  for (size_t it = 0; it < waypoints.size() - 1; it++) {
    auto child = waypoints[it];
    auto parent = waypoints[it + 1];

    auto dist =
        std::hypot(parent.first - child.first, parent.second - child.second);

    ASSERT_LE(dist, driveParam + 0.0001);
  }
}

TEST(InformedRRTStarPlannerResetTest, testInformedRRTStarResetFunction) {
  // Define the environment
  dummyBoundary.push_back(std::make_pair(0.0, 0.0));
  dummyBoundary.push_back(std::make_pair(100.0, 0.0));
  dummyBoundary.push_back(std::make_pair(100.0, 100.0));
  dummyBoundary.push_back(std::make_pair(0.0, 100.0));

  dummyObstacles.push_back({0.0, 80.0, 10.0, 80.0, 10.0, 90.0, 0.0, 90.0});
  dummyObstacles.push_back({0.0, 90.0, 25.0, 90.0, 25.0, 100.0, 0.0, 100.0});
  dummyObstacles.push_back({20.0, 0.0, 80.0, 0.0, 80.0, 15.0, 20.0, 15.0});
  dummyObstacles.push_back({93.0, 40.0, 100.0, 40.0, 100.0, 90.0, 93.0, 90.0});

  // Set the map for the planner
  dummyPlan.setMap(dummyBoundary, dummyObstacles);

  // Set start and goal point
  std::vector<double> start = {1.0, 1.0};
  std::vector<double> goal = {50.0, 51.0};

  dummyPlan.setStartAndGoal(start, goal);

  // Execute the planner
  dummyPlan.runPlanner();

  // Reset the planner
  dummyPlan.resetPlanner();

  // Assert segmentation fault when trying to access the RRTree or the planned
  // path
  ASSERT_EXIT((dummyPlan.getRRTree(), exit(0)), ::testing::ExitedWithCode(0),
              ".*");
}
